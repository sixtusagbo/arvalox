# Arvalox API Testing Requests
# Use with REST Client extension in VS Code or similar HTTP client

@baseUrl = http://localhost:8000
@apiUrl = {{baseUrl}}/api/v1

# Variables for testing (update these as needed)
@testEmail = miracleagbosixtus@gmail.com
@testPassword = testpassword123
@testOrgName = Test Organization
@accessToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1IiwiZW1haWwiOiJtaXJhY2xlYWdib3NpeHR1c0BnbWFpbC5jb20iLCJvcmdhbml6YXRpb25faWQiOjUsInJvbGUiOiJvd25lciIsImV4cCI6MTc1MzIzMDQyNiwiaWF0IjoxNzUzMjI4NjI2LCJ0eXBlIjoiYWNjZXNzIn0.wLlCxmlyjE3G0NNzwL-VpBc5i0Vw3OFo3Uv650HLhpw
@refreshToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1Iiwib3JnYW5pemF0aW9uX2lkIjo1LCJleHAiOjE3NTU4MjA1ODAsImlhdCI6MTc1MzIyODU4MCwidHlwZSI6InJlZnJlc2gifQ.JdN5pp6OGK1iNlU3dQ21SJfHR9Ef6CauL54d-1PrkbQ

###############################################################################
# CORE API ENDPOINTS
###############################################################################

### Root Endpoint
GET {{baseUrl}}/
Accept: application/json

### Health Check
GET {{baseUrl}}/health
Accept: application/json

###############################################################################
# AUTHENTICATION ENDPOINTS
###############################################################################

### User Registration
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "{{testPassword}}",
  "first_name": "John",
  "last_name": "Doe",
  "organization_name": "{{testOrgName}}",
  "organization_slug": "test-org"
}

### User Registration (Auto-generated slug)
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "user2@example.com",
  "password": "testpassword123",
  "first_name": "Jane",
  "last_name": "Smith",
  "organization_name": "Another Test Organization"
}

### User Login
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "{{testPassword}}"
}

### Get Current User Info
GET {{apiUrl}}/auth/me
Authorization: Bearer {{accessToken}}
Accept: application/json

### Refresh Token
POST {{apiUrl}}/auth/refresh
Content-Type: application/json

{
  "refresh_token": "{{refreshToken}}"
}

### User Logout
POST {{apiUrl}}/auth/logout
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###############################################################################
# ERROR TESTING SCENARIOS
###############################################################################

### Registration - Duplicate Email
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "anotherpassword123",
  "first_name": "Duplicate",
  "last_name": "User",
  "organization_name": "Duplicate Organization"
}

### Registration - Invalid Email
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "invalid-email",
  "password": "testpassword123",
  "first_name": "Invalid",
  "last_name": "Email",
  "organization_name": "Invalid Email Org"
}

### Registration - Short Password
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "shortpass@example.com",
  "password": "123",
  "first_name": "Short",
  "last_name": "Password",
  "organization_name": "Short Password Org"
}

### Registration - Missing Fields
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "missing@example.com",
  "password": "testpassword123"
}

### Login - Invalid Credentials
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "nonexistent@example.com",
  "password": "wrongpassword"
}

### Login - Wrong Password
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "wrongpassword123"
}

### Protected Endpoint - No Token
GET {{apiUrl}}/auth/me
Accept: application/json

### Protected Endpoint - Invalid Token
GET {{apiUrl}}/auth/me
Authorization: Bearer invalid_token_here
Accept: application/json

### Refresh - Invalid Token
POST {{apiUrl}}/auth/refresh
Content-Type: application/json

{
  "refresh_token": "invalid_refresh_token"
}

###############################################################################
# VALIDATION TESTING
###############################################################################

### Registration - Empty Strings
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "",
  "password": "",
  "first_name": "",
  "last_name": "",
  "organization_name": ""
}

### Registration - Very Long Values
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "verylongemailaddressthatexceedsnormallimits@verylongdomainnamethatisunreasonablylongandshouldfailvalidation.com",
  "password": "testpassword123",
  "first_name": "ThisIsAVeryLongFirstNameThatExceedsTheNormalLengthLimitAndShouldFailValidation",
  "last_name": "ThisIsAVeryLongLastNameThatExceedsTheNormalLengthLimitAndShouldFailValidation",
  "organization_name": "This Is A Very Long Organization Name That Exceeds The Normal Length Limit And Should Fail Validation Because It Is Too Long For The Database Field"
}

### Registration - Special Characters
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "special@example.com",
  "password": "testpassword123",
  "first_name": "John's",
  "last_name": "O'Connor",
  "organization_name": "Test & Development Co."
}

### Login - Malformed JSON
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "test@example.com",
  "password": "testpassword123"
  // Missing comma - malformed JSON
}

###############################################################################
# SECURITY TESTING
###############################################################################

### SQL Injection Attempt - Registration
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "'; DROP TABLE users; --@example.com",
  "password": "testpassword123",
  "first_name": "'; DROP TABLE users; --",
  "last_name": "Test",
  "organization_name": "SQL Injection Test"
}

### SQL Injection Attempt - Login
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "' OR '1'='1' --",
  "password": "' OR '1'='1' --"
}

### XSS Attempt - Registration
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "xss@example.com",
  "password": "testpassword123",
  "first_name": "<script>alert('XSS')</script>",
  "last_name": "<img src=x onerror=alert('XSS')>",
  "organization_name": "XSS Test Organization"
}

###############################################################################
# WORKFLOW TESTING
###############################################################################

### Complete Registration Flow
# 1. Register new user
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "workflow@example.com",
  "password": "workflowtest123",
  "first_name": "Workflow",
  "last_name": "Test",
  "organization_name": "Workflow Test Organization"
}

# 2. Login with new user (use tokens from registration response)
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "workflow@example.com",
  "password": "workflowtest123"
}

# 3. Access protected resource
GET {{apiUrl}}/auth/me
Authorization: Bearer {{accessToken}}
Accept: application/json

# 4. Refresh token
POST {{apiUrl}}/auth/refresh
Content-Type: application/json

{
  "refresh_token": "{{refreshToken}}"
}

# 5. Logout
POST {{apiUrl}}/auth/logout
Authorization: Bearer {{accessToken}}
Content-Type: application/json

###############################################################################
# PERFORMANCE TESTING
###############################################################################

### Multiple Rapid Requests - Health Check
GET {{baseUrl}}/health
Accept: application/json

###
GET {{baseUrl}}/health
Accept: application/json

###
GET {{baseUrl}}/health
Accept: application/json

### Multiple Login Attempts
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "{{testPassword}}"
}

###
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "{{testEmail}}",
  "password": "{{testPassword}}"
}

###############################################################################
# EDGE CASES
###############################################################################

### Empty Request Body
POST {{apiUrl}}/auth/register
Content-Type: application/json

### Invalid Content-Type
POST {{apiUrl}}/auth/register
Content-Type: text/plain

{
  "email": "contenttype@example.com",
  "password": "testpassword123",
  "first_name": "Content",
  "last_name": "Type",
  "organization_name": "Content Type Test"
}

### Large Request Body
POST {{apiUrl}}/auth/register
Content-Type: application/json

{
  "email": "large@example.com",
  "password": "testpassword123",
  "first_name": "Large",
  "last_name": "Request",
  "organization_name": "Large Request Test",
  "extra_field": "This is a very large field with lots of text that might cause issues with request processing. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
}

### Case Sensitivity Test - Email
POST {{apiUrl}}/auth/login
Content-Type: application/json

{
  "email": "TEST@EXAMPLE.COM",
  "password": "{{testPassword}}"
}

###############################################################################
# NOTES
###############################################################################

# To use these requests:
# 1. Start your Arvalox backend server (uvicorn app.main:app --reload)
# 2. Update the variables at the top with actual values
# 3. Run requests individually or in sequence
# 4. Copy tokens from responses to use in subsequent requests
# 5. Check response status codes and bodies for expected behavior

# Expected Status Codes:
# - 200: Successful requests
# - 400: Bad request (validation errors)
# - 401: Unauthorized (invalid credentials/tokens)
# - 403: Forbidden (missing authentication)
# - 405: Method not allowed
# - 422: Unprocessable entity (validation errors)
# - 500: Internal server error
